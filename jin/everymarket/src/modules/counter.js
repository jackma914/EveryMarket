// export 함수를 통해서 해당 타입을 반환하는 함수를 만들어주면 된다.
// 해당 방법은 액션의 종류가 많아진다면 액션에 따른 switch-case문도 길어진다 위와 같은 작성이 귀찮아질 수도 있다.
// 이럴 때는 redux-acitons 라이브러리를 사용
import {createAction, handleActions} from 'redux-actions'


// Action Type 정의
//=================================================================================================
const INCREASE = "counter/INCREASE";
const DECREASE = "counter/DECREASE";
//=================================================================================================


//Action Type 반환하는 함수 1. redux-actions를 사용하지 않은경우 (단점! 액션이 많아지면 귀찮아진다..)
//=================================================================================================
/*
export const increase = () => ({ type: INCREASE });
export const decrease = () => ({ type: DECREASE });
*/
//=================================================================================================


// Action Type 반환하는 함수 2. redux-actions를 사용
//=================================================================================================
export const increase = createAction(INCREASE);
export const decrease = createAction(DECREASE);
//=================================================================================================


// 추가 설명
//=================================================================================================
/*
만약 파라미터를 전달해줘야한다고 하면 payload를 사용
export const changeInput = createAction(CHANGE_INPUT, input => input)
위와 같이 입력시,
{
	type : CHANGE_INPUT,
    payload : input
}
위와 같이 payload에 값이 들어가게 된다.
*/
//=================================================================================================


// 초기값 설정
//=================================================================================================
const initialState = {
    number : 0
}
//=================================================================================================



// Reducer 함수 만들기
//=================================================================================================

// 사용하는 State와 위에서 정의한 Action Type을 가지고 Reducer 함수를 생성한다.
// Reducer 함수는 꼭 순수 함수로 만들어야 한다. 이는 아래 4가지 조건을 갖는다

/*
- 1. Reducer 함수는 이전 상태와 액션 객체를 파라미터로 받는다
- 2. 파라미터 외의 값에는 의존하면 안된다
- 3. 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환한다
- 4. 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 한다
*/
//=================================================================================================


// Reducer 함수 1. redux-actions 없이 Reducer 함수 생성
//=================================================================================================
/*
function counter(state = initialState, action) {
    switch (action.type) {
      case INCREASE:
        return {
          number: state.number + 1
        };
      case DECREASE:
        return {
          number: state.number - 1
        };
      default:
        return state;
    }
  }
  export default counter;
  */
//=================================================================================================


// Reducer 함수 2. redux-actions를 사용하여 Reducer 함수 생성
//=================================================================================================
const counter = handleActions(
    {
      [INCREASE]: (state, action) => ({
        number: state.number + 1
      }),
      [DECREASE]: (state, action) => ({
        number: state.number - 1
      })
    },
    initialState
  );
//=================================================================================================


// 추가 설명
//=================================================================================================
/*
만약 createAction에서 payload를 사용하였다면

handleActions(
  {
    [CHANGE_INPUT] : (state, { payload : input }) => ({
      ...state,
      input : input
    })
  },
  initialState
);
*/
//=================================================================================================
export default counter;